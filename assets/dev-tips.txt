1. <lombok> @Builder를 사용하여 인스턴스를 생성하는 경우, 해당 어노테이션이 표기된 생성자의 인자들은 builder 체이닝에 제외된 경우 필드 초기값이 아닌 타입 기본값이 할당됩니다. null 등의 기대하지 않은 값이 할당되지 않도록 주의하세요.
2. <coding> 중복으로 보이는 코드가 있더라도 변경되는 시점이 서로 다르다면 그대로 두는 것이 좋습니다.
3. <reactive> subscribeOn은 어느 위치에 있던 체이닝된 작업 전체에 영향을 미칩니다. publishOn으로 다른 쓰레드(풀)을 지정해주지만 않는다면요.
4. <reactive> blocking으로 구현된 메소드를 non-blocking으로 처리할 수 있는 방법은 없습니다.
5. <coding> 많이 고민했는데도 적절한 클래스명이 떠오르지 않나요? 어쩌면 책임을 나눠야 할 시점일 수도 있겠습니다.
6. <general> 새로운 해야할 일이 생겼나요? 중요한 것이 아니라면 기록해두고, 지금 하고 있는 일이 끝난 후에 시작하세요. 컨텍스트 스위칭을 최소화하세요. 본인이 하나의 코어를 가진 컴퓨터라고 생각해보세요. 멀티태스킹을 가능한 피하는 게 좋을 겁니다.
7. <IntelliJ> out, build 폴더도 지워보고 invalidate cache를 해봐도 본인 컴퓨터에서만 무언가가 안되나요? /.idea 디렉토리도 확인해보세요.
8. <IntelliJ> ⌃ + g: Add Selection for Next Occurrence
9. <IntelliJ> ⌥ + ↑: Extend Selection
10. <IntelliJ> option + ←/→: Move Caret to Previous/Next Word 
11. <general> 지금 목이 앞으로 너무 나와있지는 않나요? 바른 자세를 만들어봅시다.
12. <IntelliJ> ⌥ + ⌘ + v/p/f/c/m: Introduce Variable/Parameter/Field/Constant/Method
13. <Mysql> 5.6 버전부터 서브쿼리가 조인 방식으로 최적화됩니다만, 그래도 서브쿼리는 피하는 것이 좋습니다. 참고: https://jojoldu.tistory.com/520
14. <IntelliJ> spring boot 실행 속도 단축 팁: "InetAddress.getLocalHost().getHostName() took ... milliseconds to respond." 경고 로그가 Spring Boot 로고 바로 아래 찍혀있다면 어서 /etc/hosts에 macOS 정보를 입력해주세요. 최소 5초 이상의 시간을 단축시킬 수 있습니다. 참고: https://youtrack.jetbrains.com/issue/IDEA-157303
15. <Java> Enum도 다른 클래스들과 동일하게 상태를 가질 수 있고, 변경할 수 있습니다. 하지만 싱글톤이기 때문에 예기치 못한 문제를 방지하기 위해서 상태는 변경하지 않는 것이 좋습니다.
16. <reactive> webclient는 쓰레드풀 설정을 따로 해주지 않는 것이 좋습니다.
17. <general> 중요한 결정은 에너지가 많은 오전에, 반복적인 작업은 그 이후에.
18. <coding> 곧 생길 예정이 아닌 케이스들을 만족시키기 위한 코드들은 복잡도와 피로도만을 증가시킬 뿐입니다. 생각한 케이스가 지금부터 1년 안에 생길 것 같은지 생각해보시고 아니라면 잊어버리세요.
19. <git> git의 다양한 명령어들을 공부해 보세요. git rebase -i는 특히 유용할 것입니다. https://learngitbranching.js.org
20. <architecture> 레이어를 정의하고 나누는 작업은 자주 있는 일이 아닙니다. 나중에 레이어를 나누어야 할 필요성이 생겼을 때는 이미 정리하기 어려울 수준으로 코드가 불어나있을지도 모릅니다. 따라서 초기에 복잡도가 증가하더라도 미리 정리해두고 시작하는 것이 좋습니다.
21. <coding> 네이밍할때 반복되는 단어가 있다면 postfix보다는 prefix로 두는게 보기 좋을지도?
22. <java, spring> Transactional 어노테이션이 두가지가 존재하는 것 아시나요? 차이에 대해 확인해보세요.
23. <spring> spring 2.x 부터는 HikariCP가 기본 DBCP로 사용됩니다. application.yml 설정에도 변화가 있으니 확인하세요.
24. <network> 모든 network 요청은 timeout을 명확히 설정합시다.
25. <HikariCP> max-lifetime은 db의 wait_timeout보다 5초 정도 작게 설정합니다. 그렇지 않은 경우 db에서는 연결이 이미 끊겨 아무 소용이 없는 좀비 커넥션이 어플리케이션의 pool에 남아있게 됩니다. (min: 30s, default: 30m)
26. <DBCP> 실시간성 어플리케이션에서는 pool size의 min max를 동일하게 설정합니다. 그렇지 않은 경우 순간적으로 들어오는 많은 트래픽을 바로 대응하기 어렵습니다.
27. <general> 언제나 더 쉽고 적합한 해결책이 있는지 생각해보세요. 
28. <nginrder> ngrinder를 사용하고 계신가요? test.record(object)가 되어있는 경우 object.method()를 호출할 때마다 한 test로 카운트 되고 이는 tps에 반영됩니다. 트래픽이 N배 부풀려진 값으로 기록되지 않도록 조심하세요.
29. <spring> restTemplate은 thread pool을 설정해놓고 사용하세요.
30. <aws> 정각 또는 30분 마다 네트워크 지연 또는 패킷 유실 현상이 발생하나요? aws측 문제일 확률이 높습니다. case open하여 ALB capacity를 올려보세요.
31. <aws> aws EC2에는 noisy neighbor 개념이 존재합니다. 서로 다른 사용자들이 운영 중인 같은 타입의 인스턴스들이 한 네트워크 대역을 공유하도록 묶여있는데, 한 사용자의 인스턴스에서 버스팅이 발생하는 경우 다른 인스턴스의 네트워크에 영향을 끼칠 수 있습니다.
32. <spring> @Scheduled 어노테이션이 선언된 모든 메소드들은 기본적으로 단 하나의 쓰레드가 관리합니다. 병렬처리가 필요한 경우 SchedulingConfigurer 구현으로 쓰레드 풀을 등록해줘야 합니다.
